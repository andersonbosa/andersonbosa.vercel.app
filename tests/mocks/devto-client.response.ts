export default [
    {
        "type_of": "article",
        "id": 2011395,
        "title": "Subdomain or Subfolder: Which Is Better for Your Site’s SEO?",
        "description": "When it comes to search engine optimization (SEO), a common question for developers and site owners...",
        "published": true,
        "published_at": "2025-02-27T11:27:02.408Z",
        "slug": "subdomain-or-subfolder-which-is-better-for-your-sites-seo-paf",
        "path": "/andersonbosa/subdomain-or-subfolder-which-is-better-for-your-sites-seo-paf",
        "url": "https://dev.to/andersonbosa/subdomain-or-subfolder-which-is-better-for-your-sites-seo-paf",
        "comments_count": 0,
        "public_reactions_count": 12,
        "page_views_count": 569,
        "published_timestamp": "2025-02-27T11:27:02Z",
        "body_markdown": "\nWhen it comes to search engine optimization (SEO), a common question for developers and site owners is: **Should I use a subdomain or a subfolder?** Both options have their strengths, but the choice you make can directly affect how your site ranks in search results. In this article, we’ll break down the pros and cons of each approach to help you decide which one might work best for your main site’s SEO.\n\n---\n\n### What’s a Subdomain?\n\nA subdomain is an extension of your main domain that search engines treat as a separate site. It looks like this: `blog.example.com`. This setup is great when you need clear separation between different parts of your site.\n\n#### Pros of Using Subdomains\n\n1. **Niche targeting**: Subdomains shine when you’re dealing with distinct audiences or products. They let you craft tailored SEO strategies for each segment, which is handy for sites with diverse content.  \n   \n2. **Geographic targeting**: If your site serves multiple regions or languages, subdomains can be a perfect fit. Global companies often use them to deliver localized experiences, like `us.example.com` or `br.example.com`.  \n\n3. **Organization**: For large sites, subdomains can improve user experience by keeping navigation clean and avoiding a cluttered or confusing structure.  \n\n#### Cons of Using Subdomains\n\n1. **Split domain authority**: The biggest downside? Search engines see subdomains as separate entities. That means backlinks and authority built on a subdomain don’t directly boost your main domain (`example.com`). This can slow down your overall SEO progress.  \n\n2. **Extra SEO effort**: Since subdomains are treated as standalone sites, you’ll need to optimize each one individually. That takes more time and resources—tough if you don’t have a dedicated SEO team.  \n\n---\n\n### What’s a Subfolder?\n\nSubfolders (or subdirectories) are part of your main domain, structured like this: `example.com/blog`. From an SEO perspective, they keep all your optimization efforts tied to a single domain.\n\n#### Pros of Using Subfolders\n\n1. **Brand consistency**: Want a unified brand experience? Subfolders are the way to go. By keeping everything under your main domain, you ensure a seamless and cohesive journey for visitors.  \n\n2. **Stronger domain authority**: Unlike subdomains, all traffic, backlinks, and authority from subfolders feed directly into your main domain. This can give your search rankings a faster boost.  \n\n3. **Simpler SEO**: Managing one SEO strategy is already a big task for most sites. Subfolders keep everything centralized, making it easier to create content, earn backlinks, and track performance.  \n\n#### Cons of Using Subfolders\n\n1. **Harder to target diverse audiences**: If your site serves multiple products or groups with different needs, subfolders might make it trickier to focus on specific niches. A unified structure can dilute your targeting efforts.  \n\n2. **Complex navigation**: For sites with tons of content, cramming everything into subfolders can make navigation messy. That could hurt user experience and, indirectly, your SEO.  \n\n---\n\n### Which Works Best for Your Site?\n\nIf your **main goal** is to boost the ranking of your primary domain (`example.com`), subfolders (`example.com/blog`) are usually the better choice. They consolidate your site’s authority and amplify the impact of backlinks and optimized content.  \n\nBut if you’re targeting a diverse audience or need separate SEO strategies for different markets, **subdomains** might be the way to go. They give you flexibility to tailor content and keywords for specific groups without affecting other parts of your site.  \n\n---\n\n### Final Thoughts\n\nThe subdomain vs. subfolder decision hinges on your site’s type and SEO goals. For simplicity and a quick way to build domain authority, subfolders are the most efficient option. But if you’re juggling distinct niches or need flexible organization, subdomains could be your best bet.  \n\nNow that you’ve got the pros and cons, pick the approach that fits your site’s needs and start optimizing your online presence!  \n\n--- \n\nGot questions about boosting your site’s SEO? Drop a comment! :v:\n\n---\n\n### References\n\n* https://www.growthmachine.com/blog/subdomain-vs-domain  \n* https://www.semrush.com/blog/subdomain-vs-subdirectory/  \n* https://www.searchenginejournal.com/subdomain-subdirectory-cctld/226545/  \n* https://www.impactplus.com/blog/subdomains-vs-subfolders  \n",
        "positive_reactions_count": 12,
        "cover_image": null,
        "tag_list": [
            "seo",
            "webdev",
            "marketing",
            "analytics"
        ],
        "canonical_url": "https://dev.to/andersonbosa/subdomain-or-subfolder-which-is-better-for-your-sites-seo-paf",
        "reading_time_minutes": 3,
        "user": {
            "name": "Anderson Bosa",
            "username": "andersonbosa",
            "twitter_username": "t4inha",
            "github_username": "andersonbosa",
            "user_id": 79783,
            "website_url": "https://andersonbosa.vercel.app",
            "profile_image": "https://media2.dev.to/dynamic/image/width=640,height=640,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg",
            "profile_image_90": "https://media2.dev.to/dynamic/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg"
        }
    },
    {
        "type_of": "article",
        "id": 2300818,
        "title": "Do you know how to evaluate performance of your Java applications?",
        "description": "Recently, while chatting with an Expert here at MELI (Mercado Livre), I asked more about his past...",
        "published": true,
        "published_at": "2025-02-27T11:23:42.471Z",
        "slug": "do-you-know-how-to-evaluate-performance-of-your-java-applications-37b8",
        "path": "/andersonbosa/do-you-know-how-to-evaluate-performance-of-your-java-applications-37b8",
        "url": "https://dev.to/andersonbosa/do-you-know-how-to-evaluate-performance-of-your-java-applications-37b8",
        "comments_count": 4,
        "public_reactions_count": 2,
        "page_views_count": 78,
        "published_timestamp": "2025-02-27T11:23:42Z",
        "body_markdown": "Recently, while chatting with an Expert here at MELI (Mercado Livre), I asked more about his past experiences, curious about the problems he’s tackled. That’s when he shared a particular scenario with me that piqued my interest: the impact of boxing and unboxing in poorly implemented algorithms. I won’t share his real case due to NDA reasons. However, I went off to study this topic myself, and now I’m bringing what I’ve learned in this post for you all.  \n\nIf you work with Java, you’ve dealt with collections and autoboxing, but are you aware of the hidden cost of these automatic conversions? I hope you enjoy the content, and all feedback is welcome—thanks!  \n\n### First, What Are Boxing and Unboxing?  \n\nIn Java, *boxing* is the automatic conversion of a primitive type (e.g., `int`) into its wrapper equivalent (e.g., `Integer`). *Unboxing* is the reverse process. This has been around since Java 5 with autoboxing, making life easier when using APIs like `ArrayList`, which only accept objects. Here’s a basic example:  \n\n```java  \nint primitive = 42;  \nInteger wrapper = primitive; // Autoboxing  \nint backAgain = wrapper;     // Autounboxing  \n```  \n\nIt seems simple, but the problem arises when these conversions happen on a large scale or in poorly designed algorithms.  \n\n### Some Terms That Came Up  \n\nThe **Heap** is the memory area where Java allocates objects and arrays. It’s a global memory space, accessible by different threads in the application.  \n\nThe **Stack** is a memory area used to store local variables (primitives or object references) and method execution details (parameters, scope variables, return address).  \n\nThe **Garbage Collector**, meanwhile, is the JVM’s automatic janitor. It’s responsible for finding objects in the Heap that no longer have active references (nobody’s pointing to them anymore) and freeing up their memory for reuse.  \n\n### Why Does This Affect Performance?  \n\nPrimitive types are stored in the stack and are super lightweight—an `int` takes up `4 bytes`. An `Integer`, on the other hand, is an object in the heap, with metadata overhead (it can reach `16 bytes` or more, depending on the JVM). Each boxing creates a new object, increasing memory usage and the garbage collector’s workload. In loops or massive operations, this cost piles up fast.  \n\n### Hands-On  \n\nComparing Boxing vs. Primitives. Let’s test this with real code. The goal here is to sum 10 million integers in two ways:  \n\n1. Using an `ArrayList` (with boxing)  \n2. Using an `int` array.  \n\n> **GitHub Repository**: https://github.com/andersonbosa/boxing-performance-test/blob/main/src/BoxingPerformanceTest.java  \n> I kept it in the repo for better readability.  \n\nThe results on your computer might vary slightly from those below (since computational power differs between machines):  \n\n```\nTime with array (primitive): 29 ms  \nMemory used by primitive array: 0 MB  \n----------------------------------------  \nTime with ArrayList (boxing): 171 ms  \nMemory used by ArrayList: 288 MB  \n```\n\nWhy? With the `ArrayList`, every `int` becomes an `Integer` (10 million objects!), while the array uses just **contiguous memory** (TL;DR: fast access, slow insertion) for primitives. The garbage collector also has to clean up those objects afterward, adding to the impact.  \n\nSure, you might be thinking you’re not about to go summing 10 million numbers, right? So let’s move on—I’ll show the impact of boxing/unboxing in poorly thought-out real-world algorithms.  \n\n**Spoiler**  \nTry setting the size to `500_000_000` to see the consequences!  \n\n![VisualVM + IntelliJ Plugin](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvxyrunecol68xyomvi4.png)  \n\n### Beware of Poorly Implemented Algorithms  \n\nNested loops (a loop inside a loop) handling request data, authentication operations, or hash calculations processing large input volumes—what do they have in common? The memory and CPU overhead can easily scale, turning functional code into a bottleneck. Here are some practical examples I picked up from my research and chats with colleagues who’ve faced these issues in real systems:  \n\n1. **Authentication: Batch ID Verification**  \n\nA REST API validates user IDs from a JWT against an authorized list.  \n\n```java  \nimport java.util.List;  \nimport java.util.Set;  \nimport java.util.HashSet;  \n\npublic class AuthService {  \n    private static final Set<Integer> AUTHORIZED = new HashSet<>(List.of(1001, 1002, 1003));  \n\n    public boolean validateIds(List<Integer> userIds) {  \n        for (Integer id : userIds) { // Unboxing  \n            if (!AUTHORIZED.contains(id)) { // More unboxing  \n                return false;  \n            }  \n        }  \n        return true;  \n    }  \n}  \n```\n\nFor a request with thousands of IDs (e.g., batch validation), each `Integer` requires unboxing. The alternative? Use `int[]` and `IntHashSet` (from the [FastUtil](https://github.com/vigna/fastutil) library).  \n\n2. **Request Processing: Status Filtering**  \n\nImagine an endpoint that filters HTTP status codes (e.g., 200, 404, etc.) from received logs.  \n\n```java  \nimport java.util.ArrayList;  \nimport java.util.List;  \n\npublic class LogProcessor {  \n    public List<Integer> filterStatus(List<Integer> statusCodes) {  \n        List<Integer> filtered = new ArrayList<>();  \n        for (Integer code : statusCodes) { // Unboxing  \n            if (code >= 200 && code < 300) { // More unboxing  \n                filtered.add(code); // Boxing  \n            }  \n        }  \n        return filtered;  \n    }  \n}  \n```\n\nWith thousands of requests, each filtering operation generating boxing/unboxing would degrade performance. Using `int[]` would solve the issue.  \n\n3. **Encryption/Hashing: Data Integrity Validation**  \n\nFor example, a web service calculates and compares SHA-256 hashes of file chunks sent via request to verify integrity (e.g., in a chunked upload).  \n\n```java  \nimport java.security.MessageDigest;  \nimport java.util.ArrayList;  \nimport java.util.List;  \n\npublic class HashValidator {  \n    public List<Integer> calculateHashBytes(byte[] chunk) throws Exception {  \n        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");  \n        byte[] hash = md.digest(chunk);  \n        List<Integer> hashValues = new ArrayList<>();  \n        for (byte b : hash) {  \n            hashValues.add((int) b); // Boxing to Integer  \n        }  \n        return hashValues; // Returns for comparison  \n    }  \n}  \n```\n\nHow could we improve this? Each byte of the hash (32 bytes for SHA-256) is converted into an `Integer`, creating 32 objects per call. I simulated this with 10,000 1 KB chunks: boxing increased memory usage by 20% and added overhead to the garbage collector, impacting endpoint latency. Alternative? Stick with `byte[]` or use `int[]` if conversion is needed.  \n\n### Takeaways  \n\n- **Prefer primitives**: If you don’t need objects, use `int`, `double`, etc. Arrays like `int[]` are your friends in intensive operations.  \n- Avoid boxing in loops: Each iteration with autoboxing means one more object in the heap.  \n- Know your alternatives! Libraries like Trove or Eclipse Collections offer optimized collections for primitives.  \n- Profile your code: Tools like VisualVM or JProfiler reveal where boxing is costing you.  \n\n### My Conclusion  \n\nBoxing and unboxing are handy mechanisms, but their indiscriminate use can severely compromise performance, especially in critical or poorly tested code sections. As developers and engineers, our role goes beyond just making code work. We should aim for solutions that not only solve the problem but are also efficient, resource-sustainable, and resilient to failures.  \n\nTest, compare, and optimize—your code, your users, and your career will thank you (lol).  \n",
        "positive_reactions_count": 2,
        "cover_image": "https://media2.dev.to/dynamic/image/width=1000,height=420,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ft0m36jpjx99jfowdasg0.jpg",
        "tag_list": [
            "java",
            "performance",
            "algorithms",
            "computerscience"
        ],
        "canonical_url": "https://dev.to/andersonbosa/do-you-know-how-to-evaluate-performance-of-your-java-applications-37b8",
        "reading_time_minutes": 5,
        "user": {
            "name": "Anderson Bosa",
            "username": "andersonbosa",
            "twitter_username": "t4inha",
            "github_username": "andersonbosa",
            "user_id": 79783,
            "website_url": "https://andersonbosa.vercel.app",
            "profile_image": "https://media2.dev.to/dynamic/image/width=640,height=640,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg",
            "profile_image_90": "https://media2.dev.to/dynamic/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg"
        }
    },
    {
        "type_of": "article",
        "id": 2299493,
        "title": "Você sabe avaliar performance de suas aplicações Java?",
        "description": "Recentemente, enquanto conversava com um Expert aqui no MELI (Mercado Livre), perguntei mais sobre as...",
        "published": true,
        "published_at": "2025-02-27T11:19:24.235Z",
        "slug": "voce-sabe-avaliar-performance-de-suas-aplicacoes-java-1a2n",
        "path": "/andersonbosa/voce-sabe-avaliar-performance-de-suas-aplicacoes-java-1a2n",
        "url": "https://dev.to/andersonbosa/voce-sabe-avaliar-performance-de-suas-aplicacoes-java-1a2n",
        "comments_count": 0,
        "public_reactions_count": 0,
        "page_views_count": 14,
        "published_timestamp": "2025-02-27T11:19:24Z",
        "body_markdown": "Recentemente, enquanto conversava com um Expert aqui no MELI (Mercado Livre), perguntei mais sobre as experiências passadas dele, curioso sobre os problemas que ele já atacou. Foi aí que ele compartilhou um cenário particular comigo que me deixou intrigado: o impacto do boxing e unboxing em algoritmos mal implementados. Não vou compartilhar o caso real dele por questões de NDA. Porém, fui atrás de estudar isso esta e, agora, trago o que aprendi nesta publicação para vocês. \n\nSe você trabalha com Java, já lidou com coleções e autoboxing, mas será que está atento ao custo escondido dessas conversões automáticas? Espero que gostem do conteúdo, e todo feedback é bem-vindo, obrigado!\n\n\n### Primeiro, o que são Boxing e Unboxing?\n\nEm Java, boxing é a conversão automática de um tipo primitivo (ex.: int) para seu equivalente wrapper (ex.: Integer). Unboxing é o processo inverso. Isso existe desde o Java 5 com o autoboxing, facilitando a vida ao usar APIs como ArrayList, que só aceitam objetos. Veja um exemplo básico:\n\n```java\nint primitivo = 42;\nInteger wrapper = primitivo; // Autoboxing\nint deVolta = wrapper;       // Autounboxing\n```\n\nParece simples, mas o problema surge quando essas conversões acontecem em larga escala ou em algoritmos mal planejados.\n\n\n### Alguns nomes que apareceram\n\nA **Heap** é a área de memória onde o Java aloca objetos e arrays. É uma área de memória global, acessível por diferentes threads da aplicação.\n\nA **Stack** é uma área de memória usada para guardar variáveis locais (primitivos ou referências a objetos) e informações de execução de métodos (parâmetros, variáveis do escopo, endereço de retorno).\n\nJá o **Garbage Collector** é o lixeiro automático da JVM. Ele é responsável por achar objetos na Heap que não têm mais referências ativas (ninguém mais aponta para eles). E também de liberar a memória desses objetos para que possa ser reutilizada.\n\n\n### Por que isso afeta a performance?\n\nTipos primitivos são armazenados na stack e são super leves — um int ocupa `4 bytes`. Já um Integer é um objeto na heap, com overhead de metadados (pode chegar a `16 bytes` ou mais, dependendo da JVM). Cada boxing cria um novo objeto, aumentando o consumo de memória e o trabalho do garbage collector. Em loops ou operações massivas, esse custo acumula rápido.\n\n\n### Hands-on\n\nComparando Boxing vs. Primitivos. Vamos testar isso com um código real. O objetivo aqui é somar 10 milhões de números inteiros de duas formas: \n\n1. usando uma ArrayList (com boxing)\n2. um array int. \n\n> **Repositório GitHub**: https://github.com/andersonbosa/boxing-performance-test/blob/main/src/BoxingPerformanceTest.java\n> Eu mantive no repositório para melhorar legibilidade.\n\nO resultado no seu computador pode variar um pouco do resultado abaixo (já que o poder computacional de cada máquina varia):\n```\nTempo com array (primitivo): 29 ms\nMemória usada pelo array primitivo: 0 MB\n----------------------------------------\nTempo com ArrayList (boxing): 171 ms\nMemória usada pelo ArrayList: 288 MB\n```\n\nPor quê? No caso da ArrayList, cada int vira um Integer (10 milhões de objetos!), enquanto o array usa apenas **memória contígua** (TL;DL: acesso rápido, inserção lento) para primitivos. O garbage collector ainda precisa limpar esses objetos depois, aumentando o impacto.\n\nCerto, mas você pode estar pensando que não vai sair por aí somando 10 milhões de números, não é? Então vamos adiante, vou trazer o impacto do boxing/unboxing em algoritmos mal pensados no mundo real.\n\n\n**Spoiler**\n\nExperimente usar tamanho = 500_000_000 para ver a consequência!\n\n![VisualVM + IntelliJ Plugin](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvxyrunecol68xyomvi4.png)\n\n\n\n### Cuidado com Algoritmos Mal Implementados\n\nLoops aninhados (loop dentro de loop) manipulando dados de requisições, operações de autenticação ou cálculos de hashing processando grandes volumes de entrada. O que eles tem em comum? O overhead de memória e CPU pode facilmente escalar, transformando um código funcional em um gargalo. Aqui eu trago alguns exemplos práticos que aprendi durante minha pesquisa ao ir atrás dos meus colegas, que tiveram essas experiências em sistemas reais:\n\n\n1. **Autenticação: Verificação de IDs em Lote**\n\nUma API REST valida IDs de usuários de um JWT contra uma lista autorizada.\n\n```java\nimport java.util.List;\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class AuthService {\n    private static final Set<Integer> AUTORIZADOS = new HashSet<>(List.of(1001, 1002, 1003));\n\n    public boolean validarIds(List<Integer> userIds) {\n        for (Integer id : userIds) { // unboxing\n            if (!AUTORIZADOS.contains(id)) { // mais unboxing\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\nEm uma requisição com milhares de IDs (ex.: validação em lote), cada Integer exige unboxing. A alternativa aqui seria usar `int[]` e `IntHashSet` (da biblioteca [FastUtil](https://github.com/vigna/fastutil)):\n\n\n2. **Processamento de Requisições: Filtro de Status**\n\nImagine que você tem um endpoint que filtra os de status HTTP (ex.: 200, 404, etc) de logs recebidos.\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class LogProcessor {\n    public List<Integer> filtrarStatus(List<Integer> statusCodes) {\n        List<Integer> filtrados = new ArrayList<>();\n        for (Integer code : statusCodes) { // Unboxing\n            if (code >= 200 && code < 300) { // Mais unboxing\n                filtrados.add(code); // Boxing\n            }\n        }\n        return filtrados;\n    }\n}\n```\n\nCom milhares de requisições e cada filtragem gerando boxing/unboxing isso causaria degradação da performance. Usar `int[]` já resolveria o problema.\n\n\n3. **Criptografia/Hashing: Validação de Integridade de Dados**\n\nPor exemplo, você tem um serviço web que calcula e compara hashes SHA256 de partes de um arquivo enviado via requisição para verificar integridade (ex.: em um upload em chunks).\n\n```java\nimport java.security.MessageDigest;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class HashValidator {\n    public List<Integer> calcularHashBytes(byte[] chunk) throws Exception {\n        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n        byte[] hash = md.digest(chunk);\n        List<Integer> hashValues = new ArrayList<>();\n        for (byte b : hash) {\n            hashValues.add((int) b); // Boxing para Integer\n        }\n        return hashValues; // Retorna para comparação\n    }\n}\n```\n\nComo poderíamos melhorar aqui? Cada byte do hash (32 bytes para SHA-256) é convertido em um Integer, gerando 32 objetos por chamada. Simulei com 10.000 chunks de 1 KB: o boxing aumentou o uso de memória em 20% e adicionou overhead ao garbage collector, impactando a latência do endpoint. Alternativa? Manter como byte[] ou usar int[] se conversão for necessária\n\n\n### Aprendizados\n\n- **Prefira primitivos**: Se não precisa de objetos, use int, double, etc. Arrays como int[] são seus amigos em operações intensivas.\n- Evite boxing em loops: Cada iteração com autoboxing é um objeto a mais na heap.\n- Conheça alternativas! Bibliotecas como Trove ou Eclipse Collections oferecem coleções otimizadas para primitivos. \n- \"Perfilize\" seu código: Ferramentas como VisualVM ou JProfiler mostram onde boxing está custando caro.\n\n\n### Minha conclusão\n\nBoxing e unboxing são mecanismos úteis, mas seu uso indiscriminado pode comprometer severamente a performance, especialmente em trechos críticos ou pouco testados. Como desenvolvedores e engenheiros, nosso papel vai além de simplesmente garantir que o código funcione. Devemos buscar soluções que não só resolvam o problema, mas que também sejam eficientes, sustentáveis em termos de uso de recursos e resilientes a falhas.\n\nTeste, compare e otimize — seu código e seus usuários vão agradecer (e sua carreira tbm rsrs).\n\n",
        "positive_reactions_count": 0,
        "cover_image": "https://media2.dev.to/dynamic/image/width=1000,height=420,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F1wisvv2xdxq6uda46qic.jpg",
        "tag_list": [
            "java",
            "performance",
            "algorithms",
            "computerscience"
        ],
        "canonical_url": "https://dev.to/andersonbosa/voce-sabe-avaliar-performance-de-suas-aplicacoes-java-1a2n",
        "reading_time_minutes": 5,
        "user": {
            "name": "Anderson Bosa",
            "username": "andersonbosa",
            "twitter_username": "t4inha",
            "github_username": "andersonbosa",
            "user_id": 79783,
            "website_url": "https://andersonbosa.vercel.app",
            "profile_image": "https://media2.dev.to/dynamic/image/width=640,height=640,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg",
            "profile_image_90": "https://media2.dev.to/dynamic/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg"
        }
    },
    {
        "type_of": "article",
        "id": 1781479,
        "title": "LGPD para devs",
        "description": "Índice    O que é a LGPD Qual a importância da LGPD Você Desenvolvedor, o que precisa...",
        "published": true,
        "published_at": "2024-03-06T00:18:08.872Z",
        "slug": "lgpd-para-devs-mk0",
        "path": "/andersonbosa/lgpd-para-devs-mk0",
        "url": "https://dev.to/andersonbosa/lgpd-para-devs-mk0",
        "comments_count": 0,
        "public_reactions_count": 3,
        "page_views_count": 32,
        "published_timestamp": "2024-03-06T00:18:08Z",
        "body_markdown": "\n## Índice\n\n1. [O que é a LGPD](#chapter-1)\n2. [Qual a importância da LGPD](#chapter-2)\n3. [Você Desenvolvedor, o que precisa saber](#chapter-3)\n4. [Riscos do não cumprimento da LGPD](#chapter-4)\n5. [Onde Aprender Mais sobre a LGPD](#chapter-5)\n\n---\n\nO cenário digital no mundo inteiro está em contante evolução, nesse ambiente a proteção de dados torna-se uma prioridade crucial. No Brasil, a Lei Geral de Proteção de Dados (LGPD) surge como um marco legal para para zelar pelas informações pessoais. Neste artigo, eu quero explorar o que é a LGPD, sua importância, o que um desenvolvedor de software precisa saber para alinhar seus projetos com essa legislação essencial, e os riscos associados ao não cumprimento.\n\n\n### O que é a LGPD? <a name=\"chapter-1\"></a>\n\nA LGPD, [Lei nº 13.709/2018][lgpdlei], foi criada para regular o tratamento de dados pessoais por entidades públicas e privadas. Inspirada no Regulamento [Geral de Proteção de Dados da União Europeia (GDPR)][gdprlei], a LGPD estabelece diretrizes claras sobre a coleta, armazenamento, processamento e compartilhamento de dados pessoais.\n\n> A Lei nº 13.709, de 14 de agosto de 2018, foi promulgada com o objetivo de proteger os direitos fundamentais de liberdade e de privacidade e a livre formação da personalidade de cada indivíduo. [source](https://www.gov.br/esporte/pt-br/acesso-a-informacao/lgpd/conheca-a-lgpd)\n\nA LGPD fala sobre o tratamento de dados pessoais, dispostos em meio físico ou digital, feito por pessoa física ou jurídica de direito público ou privado, e engloba um amplo conjunto de operações efetuadas em meios manuais ou digitais.\n\n### Qual a importância da LGPD? <a name=\"chapter-2\"></a>\n\n**Proteção da Privacidade**: A LGPD busca garantir que os dados pessoais dos cidadãos sejam tratados com respeito, transparência e segurança, protegendo sua privacidade.\n\n**Reputação e Confiança**: Empresas que aderem à LGPD demonstram compromisso com a integridade e segurança dos dados. Isso fortalece a confiança do cliente e preserva a reputação da organização.\n\n**Padrões Internacionais**: Alinhando-se a padrões internacionais, a LGPD facilita a troca de dados com empresas e clientes ao redor do mundo, promovendo uma abordagem global de proteção de dados.\n\n### Você Desenvolvedor, o que precisa saber? <a name=\"chapter-3\"></a>\n\n**Mapeamento de Dados**: Entenda quais dados pessoais são coletados e processados pelos sistemas que você desenvolve. Realize um mapeamento completo para garantir conformidade com a LGPD.\n\n**Privacy by Design e by Default**: Adote práticas de privacidade desde o início do desenvolvimento, integrando a proteção de dados nos processos e sistemas, e garantindo que desde o príncipio as configurações favoreçam a privacidade.\n\n**Consentimento Transparente**: Implemente mecanismos claros de obtenção de consentimento para o tratamento de dados. Certifique-se de que os usuários estejam plenamente informados sobre como suas informações serão utilizadas.\n\n**Segurança da Informação**: Reforce a segurança em todos os níveis do desenvolvimento. A LGPD exige medidas adequadas para proteger dados pessoais contra acessos não autorizados e vazamentos.\n\n### Riscos do não cumprimento da LGPD <a name=\"chapter-4\"></a>\n\nO não cumprimento da LGPD pode acarretar em diversos riscos, incluindo:\n\n**Perda de Clientes**: A reputação da empresa pode ser severamente afetada, levando à perda de confiança e clientes.\n\n**Danos à Marca**: Violações de dados podem resultar em danos irreparáveis à marca e impactar negativamente a percepção pública.\n\n**Multa**: As multas podem atingir até 2% do faturamento da empresa, limitadas a R$ 50 milhões por infração.\n\n**Processos Legais**: A organização pode enfrentar processos legais, desencadeando custos legais significativos.\n\n### Onde Aprender Mais sobre a LGPD? <a name=\"chapter-5\"></a>\n\nA príncipío a [ANPD (Autoridade Nacional de Proteção de Dados)][anpd] é uma fonte oficial e de referência para consultar informações, dado que é a ANPD a responsável por fiscalizar e regulamentar a LGPD. \n\nPorém, na Internet é possível achar muitos outros recursos como cursos, certificações e webinars/eventos. [**Aqui**][lgpdnaintegra] é possível consultar na íntegra o texto completo da lei.\n\n---\n\nA LGPD é uma realidade que todos os desenvolvedores devem incorporar em seus projetos. Ao entender os princípios fundamentais e adotar práticas que priorizam a privacidade, os desenvolvedores contribuem para um ambiente digital mais seguro e em conformidade com as leis de proteção de dados. Então é importante manter-se informado pois a proteção de dados é uma responsabilidade compartilhada por todos nós.\n\n\n\n[lgpdlei]: https://www.gov.br/esporte/pt-br/acesso-a-informacao/lgpd\n[lgpdnaintegra]: https://www.planalto.gov.br/ccivil_03/_ato2015-2018/2018/lei/L13709compilado.htm\n[anpd]: https://www.gov.br/anpd/pt-br\n[gdprlei]: https://gdpr-info.eu",
        "positive_reactions_count": 3,
        "cover_image": "https://media2.dev.to/dynamic/image/width=1000,height=420,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fvxc1ii5l57j403o0kjh0.jpg",
        "tag_list": [
            "webdev",
            "beginners",
            "privacy",
            "lgpd"
        ],
        "canonical_url": "https://dev.to/andersonbosa/lgpd-para-devs-mk0",
        "reading_time_minutes": 3,
        "user": {
            "name": "Anderson Bosa",
            "username": "andersonbosa",
            "twitter_username": "t4inha",
            "github_username": "andersonbosa",
            "user_id": 79783,
            "website_url": "https://andersonbosa.vercel.app",
            "profile_image": "https://media2.dev.to/dynamic/image/width=640,height=640,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg",
            "profile_image_90": "https://media2.dev.to/dynamic/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg"
        }
    },
    {
        "type_of": "article",
        "id": 1592702,
        "title": "The \"Something else\" option in Linux installation",
        "description": "I won't be very detailed in this post, it's more of a future reference for my future self in case I...",
        "published": true,
        "published_at": "2023-09-07T17:12:27.426Z",
        "slug": "the-something-else-option-in-linux-installation-1c54",
        "path": "/andersonbosa/the-something-else-option-in-linux-installation-1c54",
        "url": "https://dev.to/andersonbosa/the-something-else-option-in-linux-installation-1c54",
        "comments_count": 0,
        "public_reactions_count": 4,
        "page_views_count": 1144,
        "published_timestamp": "2023-09-07T17:12:27Z",
        "body_markdown": "> I won't be very detailed in this post, it's more of a future reference for my future self in case I need to go through this again. In the \"References\" section of the post, I will leave some links to content by people who have explained what is being done in more detail. Still, I hope it can help someone else as well.\n\nHow it does not happens every day, I always forget how to setup the partitions in Ubuntu (or other OS's) when I need reinstall the system keeping my dual boot in order.\n\n![Image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdclkj6soq6ri2nbq46k.png)\n\nI recommend you format your Linux system (ig Ubuntu) in Windows, and when installing the new one, use the option \"alongside\". It's more safe and simple.\n\nBut we are here to use the \"Something else\" option. Below is a simple step by step of how use it.\n\n1. The biggest space (which will be for the operating system) use type `ext4`. For its `mount point` put the value `/`.\n2. Create a \"swap\" partition with 2048MB (2GB)\n3. Setup the field `Device for boot loader installation` to your `Windows boot manager`\n4. And you are ready to \"install now\"\n\n![Image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hlh2wg522qy9ckm7fz4.png)\n\n\n### References\n\n1. https://www.youtube.com/watch?v=GXxTxBPKecQ&ab_channel=SavvyNik\n2. https://devicetests.com/install-ubuntu-alongside-windows\n3. https://www.youtube.com/watch?v=4PXbdGHo5I8&ab_channel=LearnComputerTechnologies\n4. https://www.youtube.com/watch?v=vcOMWfykE34&ab_channel=QiroLab",
        "positive_reactions_count": 4,
        "cover_image": null,
        "tag_list": [
            "beginners",
            "tutorial",
            "linux"
        ],
        "canonical_url": "https://dev.to/andersonbosa/the-something-else-option-in-linux-installation-1c54",
        "reading_time_minutes": 1,
        "user": {
            "name": "Anderson Bosa",
            "username": "andersonbosa",
            "twitter_username": "t4inha",
            "github_username": "andersonbosa",
            "user_id": 79783,
            "website_url": "https://andersonbosa.vercel.app",
            "profile_image": "https://media2.dev.to/dynamic/image/width=640,height=640,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg",
            "profile_image_90": "https://media2.dev.to/dynamic/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg"
        }
    },
    {
        "type_of": "article",
        "id": 1388483,
        "title": "Revolutionizing Git Workflow: My Experience with aicommits",
        "description": "As a developer, optimizing and improving workflow is always a priority. That's why I'm excited to...",
        "published": true,
        "published_at": "2023-03-05T00:51:30.541Z",
        "slug": "my-experience-with-aicommits-794",
        "path": "/andersonbosa/my-experience-with-aicommits-794",
        "url": "https://dev.to/andersonbosa/my-experience-with-aicommits-794",
        "comments_count": 0,
        "public_reactions_count": 2,
        "page_views_count": 70,
        "published_timestamp": "2023-03-05T00:51:30Z",
        "body_markdown": "As a developer, optimizing and improving workflow is always a priority. That's why I'm excited to share my experience with aicommits. \n\nThis open-source tool uses OpenAPI to analyze code changes and generate descriptive commit messages automatically. Installation is straightforward, using `npm install -g aicommits`. After installation, aicommits will create commit messages automatically based on the changes made to your repository.\n\nThe awesome feature of aicommits is its ability to understand the context of your code changes and create a contextual commit message. This tool helps save time and improve the quality of your codebase by accurately reflecting changes made, making it easier for your team to review and understand the code.\n\nWhile aicommits is undoubtedly an excellent tool for developers, it's essential to highlight a potential security issue associated with its usage. Since aicommits reads and analyzes the code context, it could potentially expose sensitive information such as API keys, passwords, and other secrets or the intellectual property itself, in this case, the source code.\n\nWhile aicommits can be an invaluable tool for developers, it's essential to use it with caution and follow best practices to ensure the security of your codebase. By taking the necessary precautions, you can enjoy the benefits of aicommits while keeping your codebase safe and secure.\n\nIn conclusion, aicommits is an excellent tool for optimizing your workflow and codebase quality and git log. Its ease of use, powerful NLP (Natural Language Processing) capabilities, and ability to understand the context of your code changes make it an indispensable tool for any developer. Give aicommits a try and simplify your Git workflow while saving time.\n\n\n---\n\n#### Thanks\n\nSpecial thanks to the creators Nutlope and Hiroki Osame, this project its really awesome! \n\n---\n\n#### References\n\n1. https://github.com/Nutlope/aicommits\n2. https://en.wikipedia.org/wiki/Natural_language_processing\n3. https://github.com/privatenumber\n4. https://github.com/Nutlope",
        "positive_reactions_count": 2,
        "cover_image": null,
        "tag_list": [],
        "canonical_url": "https://dev.to/andersonbosa/my-experience-with-aicommits-794",
        "reading_time_minutes": 2,
        "user": {
            "name": "Anderson Bosa",
            "username": "andersonbosa",
            "twitter_username": "t4inha",
            "github_username": "andersonbosa",
            "user_id": 79783,
            "website_url": "https://andersonbosa.vercel.app",
            "profile_image": "https://media2.dev.to/dynamic/image/width=640,height=640,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg",
            "profile_image_90": "https://media2.dev.to/dynamic/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg"
        }
    },
    {
        "type_of": "article",
        "id": 1387531,
        "title": "How to use nodemon with VSCode debugger?",
        "description": "Table Of Contents    Intro Step by step Demo            Intro    As a developer, you know...",
        "published": true,
        "published_at": "2023-03-03T23:33:11.823Z",
        "slug": "how-to-use-nodemon-with-vscode-debugger-2bpa",
        "path": "/andersonbosa/how-to-use-nodemon-with-vscode-debugger-2bpa",
        "url": "https://dev.to/andersonbosa/how-to-use-nodemon-with-vscode-debugger-2bpa",
        "comments_count": 1,
        "public_reactions_count": 12,
        "page_views_count": 7495,
        "published_timestamp": "2023-03-03T23:33:11Z",
        "body_markdown": "## Table Of Contents\n  * [Intro](#chapter-1)\n  * [Step by step](#chapter-2)\n  * [Demo](#chapter-3)\n\n### Intro <a name=\"chapter-1\"></a>\n\nAs a developer, you know that debugging is a crucial aspect of your workflow. It helps you identify and fix issues in your code, and ultimately improve your application's performance. However, the process of debugging can be time-consuming and tedious, especially if you have to manually restart your application every time you make a change. This is where Nodemon and Visual Studio Code Debugger come in handy.\n\nNodemon is a tool that helps you automate the process of restarting your Node.js application whenever you make changes to your code. It monitors your application for changes and automatically restarts it when it detects any modifications. This saves you a lot of time and effort, as you don't have to manually stop and start your application every time you make changes.\n\nVisual Studio Code Debugger, on the other hand, is an integrated development environment (IDE) that provides a powerful debugging experience for Node.js applications. It allows you to set breakpoints, step through your code, and inspect variables and objects at runtime.\n\nVSCode provides a configuration for nodemon (see image below), but I couldn't use it at first, so I had to update to the package path installed in \"node_modules\".\n\nThis is because the \"nodemon\" package is installed in the project, not globally.\n\n---\n\n### So how do I do it? <a name=\"chapter-2\"></a>\n\nThe steps to integrate nodemon in VSCode debugger are:\n\n1. Install `nodemon` as development dependency in your repository: \n\n```bash\nnpm install -D nodemon\n# or\nnpm install --save-dev nodemon\n```\n\n2. Configure the VSCode \"launch.json\" as follows, updating the value of `runtimeExecutable`: \n\n```jsonc\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"nodemon\",\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\",\n      \"program\": \"${workspaceFolder}/app.js\",\n      \"request\": \"launch\",\n      \"restart\": true,\n      // \"runtimeExecutable\": \"nodemon\", /* ORIGINAL VALUE */\n      \"runtimeExecutable\": \"${workspaceFolder}/node_modules/nodemon/bin/nodemon.js\",\n      \"type\": \"node\"\n    }\n  ]\n}\n```\n\n---\n\n### And it done! <a name=\"chapter-3\"></a>\n\nFor your convenience I created this demo repository: [andersonbosa/nodemon-vscode-tutorial][repo]\n\n{% embed https://github.com/andersonbosa/nodemon-vscode-tutorial %}\n\n---\n\nDo you know how to integrate other languages with the VSCode Debugger? Please share in the comments! All kinds of contributions are very welcome and appreciated.\n\n\n[repo]: https://github.com/andersonbosa/nodemon-vscode-tutorial",
        "positive_reactions_count": 12,
        "cover_image": "https://media2.dev.to/dynamic/image/width=1000,height=420,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F2k2ptwbhehyx1od5lsm3.png",
        "tag_list": [
            "node",
            "vscode",
            "beginners",
            "tutorial"
        ],
        "canonical_url": "https://dev.to/andersonbosa/how-to-use-nodemon-with-vscode-debugger-2bpa",
        "reading_time_minutes": 2,
        "user": {
            "name": "Anderson Bosa",
            "username": "andersonbosa",
            "twitter_username": "t4inha",
            "github_username": "andersonbosa",
            "user_id": 79783,
            "website_url": "https://andersonbosa.vercel.app",
            "profile_image": "https://media2.dev.to/dynamic/image/width=640,height=640,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg",
            "profile_image_90": "https://media2.dev.to/dynamic/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg"
        }
    },
    {
        "type_of": "article",
        "id": 635618,
        "title": "O poder por trás do terminal Linux",
        "description": "Vamos falar sobre o que é a linha de comando e como você pode lidar com ela quando precisar, na prática.",
        "published": true,
        "published_at": "2021-03-15T15:56:53.579Z",
        "slug": "o-poder-por-tras-do-terminal-linux-2m63",
        "path": "/andersonbosa/o-poder-por-tras-do-terminal-linux-2m63",
        "url": "https://dev.to/andersonbosa/o-poder-por-tras-do-terminal-linux-2m63",
        "comments_count": 3,
        "public_reactions_count": 11,
        "page_views_count": 850,
        "published_timestamp": "2021-03-15T15:56:53Z",
        "body_markdown": "---\ntitle: O poder por trás do terminal Linux\npublished: true\ndescription: Vamos falar sobre o que é a linha de comando e como você pode lidar com ela quando precisar, na prática.\ntags: linux,terminal,bash,overthewire\ncover_image: https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2ymn14orzpgtbny0wzt.png\n---\n \n#### Choose your preferred language:\n\n- [🇧🇷 Brazilian](#brazilianVersion)\n- [🇺🇸 English]()\n\n---\n\n## 🇧🇷 Brazilian <a id=\"brazilianVersion\"></a>\n\n#### Table of contents\n\n- [Introdução](#chapter-bra-1)\n- [Comandos básicos](#chapter-bra-2)\n- [Comandos que nos ajudam a se ajudar](#chapter-bra-3)\n- [Tenha seus próprios snippets](#chapter-bra-4)\n- [Prática!](#chapter-bra-5)\n\n<!-- propaganda\n#### Confira também:\n+ [Linux: entendendo \"permissão de arquivos\"](https:// \"Confira!\")\n-->\n\n### Introdução <a id=\"chapter-bra-1\"></a>\n\nProcurar, diferenciar, analisar, compartilhar, descompactar, criptografar um arquivo, acessar computador na nuvem, converter um vídeo em gif e etc. Essas são algumas das coisas possíveis de se fazer com a linha de comando.\n\nO terminal é uma varinha de condão para interagir com os recursos do computador. Permitindo a interação de maneira prática e flexível, o que a torna uma ferramenta muito poderosa.\n\nBasicamente em todos os sistemas operacionais (e.g., Windows, Android, Mac and etc) a linha de comando é uma interface de texto para se comunicar com o computador (ou dispositivo).\n\n![image](https://i.giphy.com/media/toXKzaJP3WIgM/giphy.webp \"likeagod\")\n\nTambém conhecida como `shell`, `console`, `prompt`, `terminal` e entre outros nomes, o terminal pode assustar e deixar confuso em um primeiro contato. Como todo novo conhecimento, no início pode haver mais dificuldades. Porém, conforme vencemos essas barreiras vamos nos deparando com a nossa evolução.\n\nSaber usar o terminal pode ser essencial ao tentar lidar com os problemas que pipocam no dia-a-dia como profissional de TI. Eu li um post outro dia em que o autor disse uma coisa que me coçou:\n\n\n> Se você é um usuário Linux, o Terminal é provavelmente a ferramenta mais poderosa que você já teve. Mas o problema do Terminal é que você precisa aprender a usá-lo se quiser se beneficiar dele. - [Mauro Garcia][maurogarcia]\n\n\n<p style=\"font-size:14px; color: #aaa; text-align: center;\"> aí eu: SIMMMMMMMMMM </p>\n\n![image](https://dev-to-uploads.s3.amazonaws.com/i/xkjs7elno05bdzdrn67i.png \"SSSIIIIIIIIIMMMMMMMMMMMMMMMMMMMMMMMM\")\n\n\nIsso me coçou a querer compartilhar um pouco do que aprendi por aí com os meus colegas, e então trouxe para cá também. Saber de algumas dessas coisas fazem diferença no meu dia-a-dia como desenvolvedor de software.\n\nEspero que possa ajudá-los a se sentirem um pouco mais confortáveis da próxima vez que precisarem abrir o terminal.\n\n### Mas antes de começarmos... uma dica para não-nativos do inglês:\n\n> Pensar em inglês ajuda a assimilar os comandos!\n\nSe você for como eu, não-nativo do inglês, acredito que entenderá melhor o que quero dizer. Vamos entender com um exemplo, o comando `pwd` é para `Print Working Directory`. O que no meu idioma (braziliano) seria algo como `edt` (`Escrever o Diretório de Trabalho`).\n\nAcho que esse exemplo ajuda a deixar claro que pensar sobre o que você quer fazer em inglês ajuda a assimilar o que está sendo feito. Ajudando a internalizar o que você deseja fazer. Tal como acontece com `ls` (list) ou` cd` (change directory).\n\n### Comandos básicos <a id=\"chapter-bra-2\"></a>\n\nAqui alguns comandos práticos a se saber. Utilizei um comando para descrever eles, veremos a frente qual.\n\n- **mv** - mover (renomear) arquivos\n- **cp** - copia arquivos e diretórios\n- **rm** - remove arquivos ou diretórios\n- **ls** - lista o conteúdo do diretório\n- **pwd** - imprime o nome do diretório atual / de trabalho\n- **mkdir** - cria diretórios, cria um diretório\n- **rmdir** - remove diretórios vazios, exclui um diretório\n- **cat** - concatena arquivos e imprime na saída padrão\n- **tac** - concatena e imprime arquivos ao contrário\n- **more** - filtro de leitura de arquivo para visualização de crt\n- **less** - oposto de mais\n- **chown** - altera o proprietário e o grupo do arquivo, altera a propriedade de um arquivo\n- **chmod** - altera bits de modo de arquivo, altera as permissões de um arquivo\n- **chattr** - altera atributos de arquivo em um sistema de arquivos Linux\n- **curl** - transferir um URL\n- **wget** - O downloader de rede não interativo.\n- **tar** - um utilitário de arquivamento\n- **gzip** - comprime ou expande arquivos, uma espécie de Linux 'WinRar'\n- **ping** - envia ICMP ECHO_REQUEST para hosts de rede\n- **sort** - classificar linhas de arquivos de texto\n- **filter** - interface de filtro de conversão de arquivo do Cups\n- **uniq** - relatar ou omitir linhas repetidas\n- **history** - Biblioteca de História GNU\n- **top** - exibe processos Linux\n- **ps** - relata um instantâneo dos processos atuais.\n- **pkill** - procura ou sinaliza processos com base no nome e outros atributos\n- **ssh** - cliente de login remoto OpenSSH\n- **git** - controle de versão distribuído\n\n\nTodos comandos podem ser concatenados no terminal, é uma questão de saber como fazê-los. O poder de concatenar comandos nos dá um poder incrível com a linha de comando.\n\nPor exemplo, digamos que queremos encontrar quais comandos estão no histórico, mas existem muitas repetições e informações irrelevantes no momento (como os parâmetros)... Poderiamos fazer unificando 4 comandos na seguinte ordem: `history | cut --delimiter=\" \" -f 4 | sort | uniq`.\n\nOu talvez você queira usar uma imagem como ícone... Você poderia:\n\n```bash\n# 1) baixar a imagem e 2) encodá-la na hora.\ncurl https://duckduckgo.com/i/bfc48a09.jpg --output - | base64 -\n# agora está pronta para utilizar em uma tag HTML 😎\n```\n\n#### Aqui está uma bruxaria preciosa para a próxima vez que sua memória virtual se esgotar:\n\n- **xkill** - matar um cliente por seu recurso X. Basicamente, quando você proclama este comando, a ponta do seu querido mouse se torna a varinha de Alvo Dumbledore, onde quer que você clique (com o botão esquerdo), aquilo onde você clicou, morre 😱.\n\n![image](https://media.giphy.com/media/AhjXalGPAfJg4/giphy.gif)\n\n### Comandos que nos ajudam a se ajudar <a id=\"chapter-bra-3\"></a>\n\n- **whatis** - exibir descrições de página de manual de uma linha. Ajuda a identificar a finalidade de qualquer comando em segundos. **Foi este o comando que citei acima.**\n- **which** - localize um comando.\n- **whereis** - localize os arquivos binários, de origem e de página de manual para um comando.\n- **man** - o manual do programa. Uma interface para os manuais de referência do sistema. [This's the way!][mandaloriancreed] para qualquer coisa. As informações relevantes sobre o programa estarão no manual.\n\n```bash\n# Tente no seu terminal\n$ whatis whatis which whereis man\n```\n\n### Tenha seus próprios snippets <a id=\"chapter-bra-4\"></a>\n\nUm snippet é uma função criada para servir a um propósito. Em Bash/shellscript nós temos os famosos \"one-liners\". Recomendo tê-los por dois motivos:\n\n1. Medo: eles obviamente assustam. Uma cadeia de comandos interligados para servir a um propósito? Eu acho incrível e aterrorizante. ~~Sempre que me vejo rodando um penso que se quebrar na metade vai deletar meu sistema todo 😅.~~ Com isso você vai ficando cautelo-so com o terminal, pois, até um martelo faz mal se não for utilizado da forma correta.\n\n2. E novidades: você será exposto a novas soluções e também a novas formas de utilizar o que já conhece.\n\n> Vou deixar no roda-pé algumas referências, lugares em que podemos dar uma conferida nesses \"one-liners\". 😆\n\n<!-- propaganda\nConfira também esta publicação que fiz com algumas referências\n-->\n\n### Prática! <a id=\"chapter-bra-5\"></a>\n\nA melhor forma de aprender e assimilar é fazendo. Então vamos coloca em prática o que vimos até agora por meio de alguns exercícios. Para isso vamos utilizar o Capture The Flag [Bandit][overthewirebandit] da [OverTheWire][overthewiresite].\n\nO **Capture The Flag** é um estilo de competição que envolve diversas competências para a resolução de desafios relacionados à `infosec`, com o objetivo de capturar a bandeira (normalmente um código) e pontuar. No **Bandit** os níveis do CTF acontecem em uma máquina remota, no qual nos conectaremos pelo terminal através da [ssh][sshwiki].\n\nO **Bandit** nos ajudará a colocar em prática e lapidar nossas habilidades com o Terminal. Daqui em diante, é com vocês. Boa sorte!\n\n- [#Partiu][overthewirebandit]\n\n\n### Feedbacks 💙\n\n- Faltou alguma coisa, ou estava errada, ou você tem alguma sugestão? Por favor, me deixe saber suas opiniões! \n\n---\n\n\n#### One-liners\n\n- ⭐ https://linuxcommandlibrary.com/\n- ⭐ http://www.bashoneliners.com/\n- https://catonmat.net/top-ten-one-liners-from-commandlinefu-explained\n- https://www.stefanjudis.com/notes/1025-shell-command-one-liners-on-one-page/\n- https://rosettacode.org/wiki/Shell_one-liner\n\n##### Credits, fonts and articles:\n\n- https://dev.to/maurogarcia_19/linux-terminal-the-ultimate-cheat-sheet-2g5b\n- https://ubuntu.com/tutorials/command-line-for-beginners#1-overview\n- https://www.howtogeek.com/140679/beginner-geek-how-to-start-using-the-linux-terminal/\n- https://ctf-br.org/sobre/\n- https://wiki.archlinux.org/index.php/Dash\n- https://wiki.archlinux.org/index.php/Bash\n- https://wiki.archlinux.org/index.php/Command-line_shell\n- https://en.wikipedia.org/wiki/Bourne_shell\n\n<!-- links -->\n\n[feedbackForm]: https://forms.gle/M3K8eaSun4oY4mjQ6\n[maurogarcia]: https://dev.to/mauro_codes\n[ultimatecheatsheet]: https://dev.to/maurogarcia_19/linux-terminal-the-ultimate-cheat-sheet-2g5b\n[linuxcommandlibrary]: https://linuxcommandlibrary.com/\n[felixfanoneliners]: https://felixfan.github.io/shell-script/\n[sshwiki]: https://en.wikipedia.org/wiki/SSH_(Secure_Shell)\n[overthewiresite]: https://overthewire.org/wargames\n[overthewirebandit]: https://overthewire.org/wargames/bandit/\n[mandaloriancreed]: https://youtu.be/uelA7KRLINA?t=8\n[kalirevealed]: https://kali.training/downloads/Kali-Linux-Revealed-1st-edition.pdf\n[bashoneliners]: http://www.bashoneliners.com/oneliners/popular/\n",
        "positive_reactions_count": 11,
        "cover_image": "https://media2.dev.to/dynamic/image/width=1000,height=420,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fe2ymn14orzpgtbny0wzt.png",
        "tag_list": [
            "linux",
            "terminal",
            "bash",
            "overthewire"
        ],
        "canonical_url": "https://dev.to/andersonbosa/o-poder-por-tras-do-terminal-linux-2m63",
        "reading_time_minutes": 6,
        "user": {
            "name": "Anderson Bosa",
            "username": "andersonbosa",
            "twitter_username": "t4inha",
            "github_username": "andersonbosa",
            "user_id": 79783,
            "website_url": "https://andersonbosa.vercel.app",
            "profile_image": "https://media2.dev.to/dynamic/image/width=640,height=640,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg",
            "profile_image_90": "https://media2.dev.to/dynamic/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg"
        }
    },
    {
        "type_of": "article",
        "id": 631904,
        "title": "The power behind the Linux terminal",
        "description": "Let's talk about what the command line is and how you can deal with when you need to, in practice.",
        "published": true,
        "published_at": "2021-03-15T15:45:28.636Z",
        "slug": "the-power-behind-the-linux-terminal-189h",
        "path": "/andersonbosa/the-power-behind-the-linux-terminal-189h",
        "url": "https://dev.to/andersonbosa/the-power-behind-the-linux-terminal-189h",
        "comments_count": 5,
        "public_reactions_count": 107,
        "page_views_count": 10084,
        "published_timestamp": "2021-03-15T15:45:28Z",
        "body_markdown": "---\ntitle: The power behind the Linux terminal\npublished: true\ndescription: Let's talk about what the command line is and how you can deal with when you need to, in practice.\ntags: linux,terminal,bash,overthewire\ncover_image: https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2ymn14orzpgtbny0wzt.png\n---\n\n- [🇧🇷 Brazilian Version](https://dev.to/andersonbosa/o-poder-por-tras-do-terminal-linux-2m63)\n\n---\n\n#### Table of contents\n\n- [Introduction](#chapter-eng-1)\n- [Basic commands](#chapter-eng-2)\n- [Commands that help us help each other](#chapter-eng-3)\n- [Have your own Snippets](#chapter-eng-4)\n- [Practice!](#chapter-eng-5)\n\n### Introduction <a id=\"chapter-eng-1\"></a>\n\nSearch, differentiate, analyze, share, unzip, encrypt a file, access a cloud computer, convert a video to gif, etc. These are some of the possible things to do with the command line.\n\nThe terminal is a magic wand to interact with the computer's resources. Allowing interaction practically and flexibly, which makes it a very powerful tool.\n\nBasically on all operating systems (e.g., Windows, Android, Mac and etc.), the command line is a text interface to communicate with the computer (or device).\n\n![image](https://i.giphy.com/media/toXKzaJP3WIgM/giphy.webp \"likeagod\")\n\nAlso known as `shell`,` console`, `prompt`, and among other names, the terminal can be frightening and confusing at first contact. Like all new knowledge, in the beginning, there may be more difficulties. However, as we overcome these barriers, we are faced with our evolution.\n\nKnowing how to use the terminal can be essential when trying to deal with the problems that pop up daily as an IT professional. I read a post the other day when the author said something that itched me:\n\n> If you are a Linux user, Terminal is probably the most powerful tool you have ever had. But the problem with Terminal is that you need to learn how to use it if you want to benefit from it. - [Mauro Garcia][maurogarcia]\n\n<p style=\"font-size:14px; color: #aaa; text-align: center;\"> me: YYEESSSS </p>\n\n![image](https://dev-to-uploads.s3.amazonaws.com/i/xkjs7elno05bdzdrn67i.png \"YEEEEESSSSSSSSS\")\n\nIt scratched me to want to share a little of what I learned out there with my colleagues. And then I brought it here too. Knowing some of these things makes a difference in my day-to-day life as a software developer.\n\nI hope I can help you feel a little more comfortable the next time you need to open the terminal.\n\n### But before we start ... a tip for non-native speakers of English:\n\n> Thinking in English helps to assimilate the commands!\n\nIf you are like me, non-native English, I believe you will understand better what I mean.\n\nLet's understand with an example, the command `pwd` is for `Print Working Directory`. What in my language (Brazilian\\*) would be something like `edt` (`Write the Working Directory`).\n\nI think this example helps to make it clear that thinking about what you want to do in English helps to assimilate what is being done. Helping to internalize what you want to do. As with `ls` (list) or `cd` (change directory).\n\n### Basic commands <a id=\"chapter-eng-2\"></a>\n\nHere are some practical commands to know. I used a command to describe them, we'll see which one is ahead.\n\n- **mv** - move (rename) files\n- **cp** - copy files and directories\n- **rm** - remove files or directories\n- **ls** - list directory contents\n- **pwd** - print name of current/working directory\n- **mkdir** - make directories, create a directory\n- **rmdir** - remove empty directories, delete a directory\n- **cat** - concatenate files and print on the standard output\n- **tac** - concatenate and print files in reverse\n- **more** - filter for paging through text one screenful at a time\n- **less** - opposite of `more`. allows backward movement in the file as well as forward movement\n- **chown** - change file owner and group, change ownership of a file\n- **chmod** - change file mode bits, change permissions of a file\n- **chattr** - change file attributes on a Linux file system\n- **curl** - transfer a URL\n- **wget** - The non-interactive network downloader.\n- **tar** - an archiving utility\n- **gzip** - compress or expand files, sort of Linux 'WinRar'\n- **ping** - send ICMP ECHO_REQUEST to network hosts\n- **sort** - sort lines of text files\n- **filter** - cups file conversion filter interface\n- **uniq** - report or omit repeated lines\n- **history** - GNU History Library\n- **top** - display Linux processes\n- **ps** - report a snapshot of the current processes.\n- **pkill** - look up or signal processes based on name and other attributes\n- **ssh** - OpenSSH remote login client\n- **git** - the stupid content tracker\n\nAll commands can be concatenated in the terminal, it is a matter of knowing how to do them. The power to concatenate commands gives us incredible power with the command line.\n\nFor example, let's say we want to find which commands are in the history, but there are a lot of repetitions and irrelevant information at the moment (like the parameters) ... We could do it by unifying 4 commands in the following order: `history | cut --delimiter=\" \" -f 4 | sort | uniq`.\n\nOr maybe you want to use an image as an icon ... You could:\n\n```bash\n# 1) download the image and 2) encode it on the fly.\ncurl https://duckduckgo.com/i/bfc48a09.jpg --output - | base64 -\n# is now ready to use in an HTML tag 😎\n```\n\n#### Here is precious witchcraft for the next time your virtual memory runs out:\n\n- **xkill** - kill a client by its X resource. Basically when you proclaim this command the point of your mouse will become Alvo Dumbledore's wand. Wherever you (left) click, the thing where you clicked dies.\n\n![image](https://media.giphy.com/media/AhjXalGPAfJg4/giphy.gif)\n\n### Commands that help us help each other <a id=\"chapter-eng-3\"></a>\n\n- **whatis** - display one-line manual page descriptions. It helps to identify the purpose of any command in seconds. **This was the command I mentioned above.**\n- **which** - locate a command.\n- **whereis** - locate the binary, source, and manual page files for a command.\n- **man** - the program manual. An interface to the system reference manuals.\n  [This is the way][mandaloriancreed] to anything. The relevant information about the program will be in the manual.\n\n```bash\n# Try on your terminal\n$ whatis whatis which whereis man\n```\n\n### Have your own Snippets <a id=\"chapter-eng-4\"></a>\n\nA snippet is a function designed to serve a purpose. In Bash / shellscript we have the famous \"one-liners\". I recommend having them for two reasons:\n\n1. Fear: they obviously scare. A chain of interconnected commands to serve a purpose? I find it incredible and terrifying. ~~ Whenever I find myself running a I think that if it breaks in half it will delete my entire system 😅. ~~ With that you will be cautious with the terminal because even a hammer is bad if it is not used correctly.\n\n2. And news: you will be exposed to new solutions and also to new ways of using what you already know.\n\n> I will leave some references on the wheel, places where we can check out these \"one-liners\". 😆\n\n<!-- propaganda\nConfira também esta publicação que fiz com algumas referências\n-->\n\n### Practice! <a id=\"chapter-eng-5\"></a>\n\nThe best way to learn and assimilate is by doing. So let's put into practice what we've seen so far through some exercises. For this we will use Capture The Flag [Bandit] [overthewirebandit] from [OverTheWire] [overthewiresite].\n\n**Capture The Flag** is a style of competition that involves several skills to solve challenges related to `infosec`, to capture the flag (usually a code), and scoring. In **Bandit** the CTF levels take place on a remote machine, where we will connect via the terminal via [ssh] [sshwiki].\n\n**Bandit** will help us to put into practice and polish our skills with the Terminal. From here on, it's up to you. Good luck!\n\n- [#Start here!][overthewirebandit]\n\n\n### Feedbacks 💙\n\n- Was something missing, or was it wrong, or do you have any suggestions? Please let me know your opinions!\n\n\n---\n\n\n#### One-liners\n\n- ⭐ https://linuxcommandlibrary.com/\n- ⭐ http://www.bashoneliners.com/\n- https://catonmat.net/top-ten-one-liners-from-commandlinefu-explained\n- https://www.stefanjudis.com/notes/1025-shell-command-one-liners-on-one-page/\n- https://rosettacode.org/wiki/Shell_one-liner\n\n##### Credits, fonts and articles:\n\n- https://dev.to/maurogarcia_19/linux-terminal-the-ultimate-cheat-sheet-2g5b\n- https://ubuntu.com/tutorials/command-line-for-beginners#1-overview\n- https://www.howtogeek.com/140679/beginner-geek-how-to-start-using-the-linux-terminal/\n- https://ctf-br.org/sobre/\n- https://wiki.archlinux.org/index.php/Dash\n- https://wiki.archlinux.org/index.php/Bash\n- https://wiki.archlinux.org/index.php/Command-line_shell\n- https://en.wikipedia.org/wiki/Bourne_shell\n\n<!-- links -->\n\n[feedbackForm]: https://forms.gle/M3K8eaSun4oY4mjQ6\n[maurogarcia]: https://dev.to/mauro_codes\n[ultimatecheatsheet]: https://dev.to/maurogarcia_19/linux-terminal-the-ultimate-cheat-sheet-2g5b\n[linuxcommandlibrary]: https://linuxcommandlibrary.com/\n[felixfanoneliners]: https://felixfan.github.io/shell-script/\n[sshwiki]: https://en.wikipedia.org/wiki/SSH_(Secure_Shell)\n[overthewiresite]: https://overthewire.org/wargames\n[overthewirebandit]: https://overthewire.org/wargames/bandit/\n[mandaloriancreed]: https://youtu.be/uelA7KRLINA?t=8\n[kalirevealed]: https://kali.training/downloads/Kali-Linux-Revealed-1st-edition.pdf\n[bashoneliners]: http://www.bashoneliners.com/oneliners/popular/\n",
        "positive_reactions_count": 107,
        "cover_image": "https://media2.dev.to/dynamic/image/width=1000,height=420,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fe2ymn14orzpgtbny0wzt.png",
        "tag_list": [
            "linux",
            "terminal",
            "bash",
            "overthewire"
        ],
        "canonical_url": "https://dev.to/andersonbosa/the-power-behind-the-linux-terminal-189h",
        "reading_time_minutes": 6,
        "user": {
            "name": "Anderson Bosa",
            "username": "andersonbosa",
            "twitter_username": "t4inha",
            "github_username": "andersonbosa",
            "user_id": 79783,
            "website_url": "https://andersonbosa.vercel.app",
            "profile_image": "https://media2.dev.to/dynamic/image/width=640,height=640,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg",
            "profile_image_90": "https://media2.dev.to/dynamic/image/width=90,height=90,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F79783%2F87dbf805-b8ba-4816-8b8f-14cc5116ef44.jpeg"
        }
    }
]
